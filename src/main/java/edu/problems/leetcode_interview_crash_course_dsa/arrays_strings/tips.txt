1 Use the StringBuilder class.
2 When building the string, add the characters to the list. This is O(1) per operation. Across n operations, it will
cost O(n) in total.
3 Once finished, convert the list to a string using StringBuilder.toString(). This is O(n)
4 In total, it cost us O(n+n) = O(2n) = O(n).

public string buildString(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
        sb.append(s.charAt(i));
    }
    return sb.toString();
}

--------------
Subarrays/substrings:
As a reminder, a subarray or substring is a contiguous section of an array or string.
---------------
Subsequences:
A subsequence is a set of elements of an array/string that keeps the same relative order but doesn't need to be contiguous.
For example, subsequences of [1, 2, 3, 4] include: [1, 3], [4], [], [2, 3], but not [3, 2], [5], [4, 1].
---------------
Subsets:
A subset is any set of elements from the original array or string. The order doesn't matter and neither do the elements being
beside each other. For example, given [1, 2, 3, 4], all of these are subsets: [3, 2], [4, 1, 2], [1]. Note: subsets that contain
the same elements are considered the same, so [1, 2, 4] is the same subset as [4, 1, 2].